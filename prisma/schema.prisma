// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  isPremium Boolean  @default(false)
  language  String   @default("tr") // tr, de, en
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  quizAttempts QuizAttempt[]
  subscriptions Subscription[]
  createdGroups Group[] @relation("GroupCreator")
  groupMemberships Group[] @relation("GroupMembers")
  sessionParticipations StudySession[] @relation("SessionParticipants")
  wrongAnswers WrongAnswer[]
  
  @@map("users")
}

model Question {
  id          String   @id @default(cuid())
  question    String
  options     String   // JSON string of options array
  correctAnswer Int
  explanation String
  category    String
  difficulty  String   @default("medium") // easy, medium, hard
  isPremium   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  quizAttempts QuizAttempt[]
  wrongAnswers WrongAnswer[]
  
  @@map("questions")
}

model QuizAttempt {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  userAnswer Int
  isCorrect  Boolean
  timeSpent  Int      @default(0) // in seconds
  createdAt  DateTime @default(now())
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@map("quiz_attempts")
}

model WrongAnswer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  userAnswer Int
  correctAnswer Int
  explanation String
  category   String
  difficulty String
  createdAt  DateTime @default(now())
  reviewedAt DateTime?
  isReviewed Boolean  @default(false)
  
  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  @@map("wrong_answers")
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String
  stripeId      String   @unique
  status        String   // active, canceled, past_due
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  stripeId      String   @unique
  amount        Int      // in cents
  currency      String   @default("eur")
  status        String   // succeeded, failed, pending
  createdAt     DateTime @default(now())
  
  @@map("payments")
}

model Group {
  id            String   @id @default(cuid())
  name          String
  description   String?
  maxMembers    Int      @default(10)
  createdBy     String
  questionSetIds String? // JSON string of question set IDs
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  createdByUser User @relation("GroupCreator", fields: [createdBy], references: [id])
  members      User[] @relation("GroupMembers")
  studySessions StudySession[]
  
  @@map("groups")
}

model StudySession {
  id        String   @id @default(cuid())
  groupId   String
  title     String
  description String?
  startTime DateTime
  endTime   DateTime?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  // Relations
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participants User[] @relation("SessionParticipants")
  
  @@map("study_sessions")
}
