import { test, expect } from '@playwright/test';

test.describe('Homepage Tests', () => {
  test('Ana sayfa yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/');
    await expect(page).toHaveTitle(/Leben in Deutschland Test/);
    
    // Logo'nun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('text=Leben in Deutschland Test')).toBeVisible();
    
    // Start Quiz butonunun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('text=Start Quiz')).toBeVisible();
  });

  test('Hero section gÃ¶rÃ¼nÃ¼r', async ({ page }) => {
    await page.goto('/');
    
    // Hero baÅŸlÄ±ÄŸÄ±nÄ± kontrol et
    await expect(page.locator('h1')).toContainText('Leben In Deutschland');
    
    // Brandenburg Gate resmini kontrol et
    const image = page.locator('img[alt*="Brandenburg Gate"]');
    await expect(image).toBeVisible();
  });

  test('Header navigasyon Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/');
    
    // Language selector butonlarÄ±nÄ± kontrol et
    await expect(page.locator('button:has-text("EN")')).toBeVisible();
    await expect(page.locator('button:has-text("DE")')).toBeVisible();
    
    // Auth butonlarÄ±nÄ± kontrol et
    await expect(page.locator('text=Log in')).toBeVisible();
    await expect(page.locator('text=Sign up')).toBeVisible();
  });

  test('Dil deÄŸiÅŸtirme Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/');
    
    // EN butonuna tÄ±kla
    await page.click('button:has-text("EN")');
    await expect(page.locator('text=Log in')).toBeVisible();
    
    // DE butonuna tÄ±kla
    await page.click('button:has-text("DE")');
    await expect(page.locator('text=Anmelden')).toBeVisible();
  });
});

test.describe('Quiz Functionality', () => {

  test('Quiz sayfasÄ± yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/quiz');
    
    // Quiz baÅŸlÄ±ÄŸÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('h1:has-text("Leben in Deutschland Test")')).toBeVisible();
    
    // Ãœcretsiz quiz bilgisinin gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('text=Free Quiz')).toBeVisible();
    
    // Dil seÃ§imi bÃ¶lÃ¼mÃ¼nÃ¼n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('text=Language Selection')).toBeVisible();
  });

  test('Quiz dil seÃ§imi Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/quiz');
    
    // Dil seÃ§eneklerinin gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('button:has-text("ğŸ‡©ğŸ‡ª Deutsch")')).toBeVisible();
    await expect(page.locator('button:has-text("ğŸ‡ºğŸ‡¸ English")')).toBeVisible();
    await expect(page.locator('button:has-text("ğŸ‡¹ğŸ‡· TÃ¼rkÃ§e")')).toBeVisible();
    
    // TÃ¼rkÃ§e dil seÃ§eneÄŸine tÄ±kla
    await page.click('button:has-text("ğŸ‡¹ğŸ‡· TÃ¼rkÃ§e")');
    
    // Sorunun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('h2')).toBeVisible();
  });

  test('Quiz soru cevaplama Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/quiz');
    
    // Ä°lk cevap seÃ§eneÄŸini seÃ§ (quiz sayfasÄ±ndaki cevap butonlarÄ±)
    const answerButtons = page.locator('button').filter({ hasText: /^[A-D]\./ });
    if (await answerButtons.count() > 0) {
      await answerButtons.first().click();
      
      // Submit butonunun aktif olduÄŸunu kontrol et
      await expect(page.locator('button:has-text("Submit Answer")')).toBeEnabled();
      
      // Submit butonuna tÄ±kla
      await page.click('button:has-text("Submit Answer")');
      
      // AÃ§Ä±klama bÃ¶lÃ¼mÃ¼nÃ¼n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
      await expect(page.locator('text=Explanation:')).toBeVisible();
    }
  });

  test('Quiz navigation Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/quiz');
    
    // Ä°lk cevap seÃ§eneÄŸini seÃ§
    const answerButtons = page.locator('button').filter({ hasText: /^[A-D]\./ });
    if (await answerButtons.count() > 0) {
      await answerButtons.first().click();
      await page.click('button:has-text("Submit Answer")');
      
      // Next Question butonunun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
      await expect(page.locator('button:has-text("Next Question")')).toBeVisible();
      
      // Next Question butonuna tÄ±kla
      await page.click('button:has-text("Next Question")');
      
      // Yeni sorunun yÃ¼klendiÄŸini kontrol et
      await expect(page.locator('h2')).toBeVisible();
    }
  });
});

test.describe('Pricing Page Tests', () => {
  test('Pricing sayfasÄ± yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/pricing');
    
    // Pricing baÅŸlÄ±ÄŸÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et (DE varsayÄ±lan)
    await expect(page.locator('h1')).toContainText('Preise');
    
    // Free plan kartÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('text=Kostenlos')).toBeVisible();
    
    // Premium plan kartÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('text=Premium')).toBeVisible();
  });

  test('Pricing dil deÄŸiÅŸtirme Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/pricing');
    
    // EN butonuna tÄ±kla
    await page.click('button:has-text("EN")');
    await expect(page.locator('h1')).toContainText('Pricing');
    
    // DE butonuna tÄ±kla
    await page.click('button:has-text("DE")');
    await expect(page.locator('h1')).toContainText('Preise');
  });

  test('Premium plan Ã¶zellikleri gÃ¶rÃ¼nÃ¼r', async ({ page }) => {
    await page.goto('/pricing');
    
    // Premium Ã¶zelliklerini kontrol et (DE varsayÄ±lan)
    await expect(page.locator('text=300+ Fragen')).toBeVisible();
    await expect(page.locator('text=Mehrsprachige UnterstÃ¼tzung')).toBeVisible();
    await expect(page.locator('text=KI-ErklÃ¤rungen')).toBeVisible();
    
    // Fiyat bilgisini kontrol et
    await expect(page.locator('text=â‚¬5.99')).toBeVisible();
    await expect(page.locator('text=3 Monate')).toBeVisible();
  });

  test('Premium plan butonu Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/pricing');
    
    // Premium plan butonunun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et (DE varsayÄ±lan)
    await expect(page.locator('button:has-text("Premium werden")')).toBeVisible();
    
    // Butona tÄ±kla
    await page.click('button:has-text("Premium werden")');
    
    // Payment sayfasÄ±na yÃ¶nlendirildiÄŸini kontrol et
    await expect(page).toHaveURL('/payment');
  });
});

test.describe('Payment Page Tests', () => {
  test('Payment sayfasÄ± yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/payment');
    
    // Payment baÅŸlÄ±ÄŸÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et (EN varsayÄ±lan)
    await expect(page.locator('h1')).toContainText('Premium Membership - â‚¬5.99/month');
    
    // Form alanlarÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('input[placeholder*="Name"]')).toBeVisible();
    await expect(page.locator('input[placeholder*="Card"]')).toBeVisible();
    await expect(page.locator('input[placeholder*="MM/YY"]')).toBeVisible();
    await expect(page.locator('input[placeholder*="CVC"]')).toBeVisible();
  });

  test('Payment form doldurma', async ({ page }) => {
    await page.goto('/payment');
    
    // Form alanlarÄ±nÄ± doldur
    await page.fill('input[placeholder*="Name"]', 'Test User');
    await page.fill('input[placeholder*="Card"]', '4242424242424242');
    await page.fill('input[placeholder*="MM/YY"]', '12/25');
    await page.fill('input[placeholder*="CVC"]', '123');
    
    // Pay butonunun aktif olduÄŸunu kontrol et
    await expect(page.locator('button:has-text("Pay")')).toBeEnabled();
  });

  test('Payment dil deÄŸiÅŸtirme', async ({ page }) => {
    await page.goto('/payment');
    
    // DE butonuna tÄ±kla
    await page.click('button:has-text("DE")');
    
    // DE baÅŸlÄ±ÄŸÄ±nÄ± kontrol et
    await expect(page.locator('h1')).toContainText('Premium-Mitgliedschaft - â‚¬5.99/Monat');
    
    // DE form etiketlerini kontrol et
    await expect(page.locator('label:has-text("Name auf der Karte")')).toBeVisible();
    await expect(page.locator('label:has-text("Kartennummer")')).toBeVisible();
  });
});

test.describe('Premium Dashboard Tests', () => {
  test('Premium dashboard yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/premium-dashboard');
    
    // Premium dashboard baÅŸlÄ±ÄŸÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('h1')).toContainText('Premium Dashboard');
    
    // Welcome banner gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Welcome to Premium')).toBeVisible();
  });

  test('State selection Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/premium-dashboard');
    
    // State dropdown gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('select')).toBeVisible();
    
    // State seÃ§
    await page.selectOption('select', 'Baden-WÃ¼rttemberg');
    
    // SeÃ§ilen state'in gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('select')).toHaveValue('Baden-WÃ¼rttemberg');
  });

  test('Language selection Ã§alÄ±ÅŸÄ±yor', async ({ page }) => {
    await page.goto('/premium-dashboard');
    
    // Language selection kartÄ± gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Language Selection')).toBeVisible();
    
    // Dil seÃ§enekleri gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('button:has-text("ğŸ‡©ğŸ‡ª Deutsch")')).toBeVisible();
    await expect(page.locator('button:has-text("ğŸ‡©ğŸ‡ªğŸ‡¹ğŸ‡· Deutsch + TÃ¼rkÃ§e")')).toBeVisible();
    await expect(page.locator('button:has-text("ğŸ‡©ğŸ‡ªğŸ‡ºğŸ‡¸ Deutsch + English")')).toBeVisible();
  });

  test('Question categories gÃ¶rÃ¼nÃ¼r', async ({ page }) => {
    await page.goto('/premium-dashboard');
    
    // Question categories baÅŸlÄ±ÄŸÄ± gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Question Categories')).toBeVisible();
    
    // Kategori kartlarÄ± gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Politics')).toBeVisible();
    await expect(page.locator('text=Law')).toBeVisible();
    await expect(page.locator('text=Culture')).toBeVisible();
    await expect(page.locator('text=Economy')).toBeVisible();
  });

  test('Additional tools gÃ¶rÃ¼nÃ¼r', async ({ page }) => {
    await page.goto('/premium-dashboard');
    
    // Additional tools baÅŸlÄ±ÄŸÄ± gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Additional Tools')).toBeVisible();
    
    // Tool kartlarÄ± gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Progress Tracking')).toBeVisible();
    await expect(page.locator('text=Wrong Answers Review')).toBeVisible();
  });
});

test.describe('Authentication Tests', () => {
  test('Login sayfasÄ± yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/auth/signin');
    
    // Login baÅŸlÄ±ÄŸÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et (DE varsayÄ±lan)
    await expect(page.locator('h1')).toContainText('Anmelden');
    
    // Form alanlarÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('input[type="email"]')).toBeVisible();
    await expect(page.locator('input[type="password"]')).toBeVisible();
    
    // Login butonunun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('button[type="submit"]')).toBeVisible();
  });

  test('Signup sayfasÄ± yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/auth/signup');
    
    // Signup baÅŸlÄ±ÄŸÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et (DE varsayÄ±lan)
    await expect(page.locator('h1')).toContainText('Registrieren');
    
    // Form alanlarÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('input[type="email"]')).toBeVisible();
    await expect(page.locator('input[type="password"]')).toBeVisible();
    await expect(page.locator('input[type="text"]')).toBeVisible(); // Name field
    
    // Signup butonunun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('button[type="submit"]')).toBeVisible();
  });

  test('Login form doldurma', async ({ page }) => {
    await page.goto('/auth/signin');
    
    // Form alanlarÄ±nÄ± doldur
    await page.fill('input[type="email"]', 'test@example.com');
    await page.fill('input[type="password"]', 'password123');
    
    // Submit butonunun aktif olduÄŸunu kontrol et
    await expect(page.locator('button[type="submit"]')).toBeEnabled();
  });

  test('Signup form doldurma', async ({ page }) => {
    await page.goto('/auth/signup');
    
    // Form alanlarÄ±nÄ± doldur
    await page.fill('input[type="text"]', 'Test User');
    await page.fill('input[type="email"]', 'test@example.com');
    await page.fill('input[type="password"]', 'password123');
    
    // Submit butonunun aktif olduÄŸunu kontrol et
    await expect(page.locator('button[type="submit"]')).toBeEnabled();
  });

  test('Login dil deÄŸiÅŸtirme', async ({ page }) => {
    await page.goto('/auth/signin');
    
    // EN butonuna tÄ±kla
    await page.click('button:has-text("EN")');
    
    // EN baÅŸlÄ±ÄŸÄ±nÄ± kontrol et
    await expect(page.locator('h1')).toContainText('Log in');
    
    // EN form etiketlerini kontrol et
    await expect(page.locator('label:has-text("Email")')).toBeVisible();
    await expect(page.locator('label:has-text("Password")')).toBeVisible();
  });
});

test.describe('Progress Page Tests', () => {
  test('Progress sayfasÄ± yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/progress');
    
    // Progress baÅŸlÄ±ÄŸÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et (EN varsayÄ±lan)
    await expect(page.locator('h1')).toContainText('Progress Tracking');
    
    // Progress kartlarÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('text=Politics')).toBeVisible();
    await expect(page.locator('text=Law')).toBeVisible();
    await expect(page.locator('text=Culture')).toBeVisible();
  });

  test('Progress dil deÄŸiÅŸtirme', async ({ page }) => {
    await page.goto('/progress');
    
    // DE butonuna tÄ±kla
    await page.click('button:has-text("DE")');
    
    // DE baÅŸlÄ±ÄŸÄ±nÄ± kontrol et
    await expect(page.locator('h1')).toContainText('Fortschrittsverfolgung');
  });
});

test.describe('All Questions Page Tests', () => {
  test('All Questions sayfasÄ± yÃ¼kleniyor', async ({ page }) => {
    await page.goto('/all-questions');
    
    // All Questions baÅŸlÄ±ÄŸÄ±nÄ±n gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('h1')).toContainText('All Questions');
    
    // Language selection gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Language Selection')).toBeVisible();
    
    // Category selection gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Category Selection')).toBeVisible();
  });

  test('All Questions dil seÃ§imi', async ({ page }) => {
    await page.goto('/all-questions');
    
    // Dil seÃ§eneklerinin gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('button:has-text("ğŸ‡©ğŸ‡ª Deutsch")')).toBeVisible();
    await expect(page.locator('button:has-text("ğŸ‡©ğŸ‡ªğŸ‡¹ğŸ‡· Deutsch + TÃ¼rkÃ§e")')).toBeVisible();
    await expect(page.locator('button:has-text("ğŸ‡©ğŸ‡ªğŸ‡ºğŸ‡¸ Deutsch + English")')).toBeVisible();
    
    // TÃ¼rkÃ§e dil seÃ§eneÄŸine tÄ±kla
    await page.click('button:has-text("ğŸ‡©ğŸ‡ªğŸ‡¹ğŸ‡· Deutsch + TÃ¼rkÃ§e")');
    
    // Sorunun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('h2')).toBeVisible();
  });

  test('All Questions kategori seÃ§imi', async ({ page }) => {
    await page.goto('/all-questions');
    
    // Kategori seÃ§eneklerinin gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('text=Politics')).toBeVisible();
    await expect(page.locator('text=Law')).toBeVisible();
    await expect(page.locator('text=Culture')).toBeVisible();
    
    // Politics kategorisine tÄ±kla
    await page.click('button:has-text("Politics")');
    
    // Sorunun gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et
    await expect(page.locator('h2')).toBeVisible();
  });
});

test.describe('Responsive Design Tests', () => {
  test('Mobil gÃ¶rÃ¼nÃ¼m - Ana sayfa', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('/');
    
    // Mobil gÃ¶rÃ¼nÃ¼mde ana sayfa yÃ¼kleniyor
    await expect(page.locator('h1')).toContainText('Leben In Deutschland');
    
    // Mobilde language selector butonlarÄ± gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('button:has-text("EN")')).toBeVisible();
    await expect(page.locator('button:has-text("DE")')).toBeVisible();
  });

  test('Mobil gÃ¶rÃ¼nÃ¼m - Quiz sayfasÄ±', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('/quiz');
    
    // Mobil gÃ¶rÃ¼nÃ¼mde quiz sayfasÄ± yÃ¼kleniyor
    await expect(page.locator('h1')).toContainText('Leben in Deutschland Test');
    
    // Mobilde quiz elementleri gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Free Quiz')).toBeVisible();
    await expect(page.locator('text=Language Selection')).toBeVisible();
  });

  test('Mobil gÃ¶rÃ¼nÃ¼m - Pricing sayfasÄ±', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('/pricing');
    
    // Mobil gÃ¶rÃ¼nÃ¼mde pricing sayfasÄ± yÃ¼kleniyor (DE varsayÄ±lan)
    await expect(page.locator('h1')).toContainText('Preise');
    
    // Mobilde pricing kartlarÄ± gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Kostenlos')).toBeVisible();
    await expect(page.locator('text=Premium')).toBeVisible();
  });

  test('Tablet gÃ¶rÃ¼nÃ¼m', async ({ page }) => {
    await page.setViewportSize({ width: 768, height: 1024 });
    await page.goto('/');
    
    // Tablet gÃ¶rÃ¼nÃ¼mde sayfa yÃ¼kleniyor
    await expect(page.locator('h1')).toContainText('Leben In Deutschland');
    
    // Tablet'te tÃ¼m elementler gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('text=Start Quiz')).toBeVisible();
    await expect(page.locator('text=Premium Features')).toBeVisible();
  });
});

test.describe('Error Handling Tests', () => {
  test('404 sayfasÄ±', async ({ page }) => {
    await page.goto('/nonexistent-page');
    
    // 404 sayfasÄ±nÄ±n yÃ¼klendiÄŸini kontrol et
    await expect(page.locator('text=404')).toBeVisible();
  });

  test('Resim yÃ¼kleme hatasÄ± fallback', async ({ page }) => {
    await page.goto('/');
    
    // JavaScript ile resim hatasÄ±nÄ± simÃ¼le et
    await page.evaluate(() => {
      const img = document.querySelector('img[alt*="Brandenburg Gate"]');
      if (img) {
        img.dispatchEvent(new Event('error'));
      }
    });
    
    // Fallback iÃ§eriÄŸinin gÃ¶rÃ¼nÃ¼r olduÄŸunu kontrol et (gradient background)
    await page.waitForTimeout(1000); // Fallback'in yÃ¼klenmesi iÃ§in bekle
  });

  test('API hata durumu', async ({ page }) => {
    // API'yi mock'la ve hata dÃ¶ndÃ¼r
    await page.route('**/api/**', route => {
      route.fulfill({
        status: 500,
        contentType: 'application/json',
        body: JSON.stringify({ error: 'Internal Server Error' })
      });
    });
    
    await page.goto('/quiz');
    
    // Hata durumunda sayfa yine de yÃ¼klenmeli
    await expect(page.locator('h1')).toContainText('Leben in Deutschland Test');
  });
});

test.describe('Performance Tests', () => {
  test('Ana sayfa yÃ¼kleme hÄ±zÄ±', async ({ page }) => {
    const startTime = Date.now();
    await page.goto('/');
    const loadTime = Date.now() - startTime;
    
    // Sayfa 5 saniyeden az sÃ¼rede yÃ¼klenmeli
    expect(loadTime).toBeLessThan(5000);
    
    // Temel elementlerin yÃ¼klendiÄŸini kontrol et
    await expect(page.locator('h1')).toContainText('Leben In Deutschland');
  });

  test('Quiz sayfasÄ± performansÄ±', async ({ page }) => {
    const startTime = Date.now();
    await page.goto('/quiz');
    const loadTime = Date.now() - startTime;
    
    // Quiz sayfasÄ± 3 saniyeden az sÃ¼rede yÃ¼klenmeli
    expect(loadTime).toBeLessThan(3000);
    
    // Quiz elementlerinin yÃ¼klendiÄŸini kontrol et
    await expect(page.locator('h1:has-text("Leben in Deutschland Test")')).toBeVisible();
  });

  test('Pricing sayfasÄ± performansÄ±', async ({ page }) => {
    const startTime = Date.now();
    await page.goto('/pricing');
    const loadTime = Date.now() - startTime;
    
    // Pricing sayfasÄ± 3 saniyeden az sÃ¼rede yÃ¼klenmeli
    expect(loadTime).toBeLessThan(3000);
    
    // Pricing elementlerinin yÃ¼klendiÄŸini kontrol et
    await expect(page.locator('h1')).toContainText('Preise');
  });

  test('Mobil performans', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    
    const startTime = Date.now();
    await page.goto('/');
    const loadTime = Date.now() - startTime;
    
    // Mobil sayfa 4 saniyeden az sÃ¼rede yÃ¼klenmeli
    expect(loadTime).toBeLessThan(4000);
    
    // Mobilde temel elementler gÃ¶rÃ¼nÃ¼r
    await expect(page.locator('h1')).toContainText('Leben In Deutschland');
  });
});

test.describe('Accessibility Tests', () => {
  test('Ana sayfa eriÅŸilebilirlik', async ({ page }) => {
    await page.goto('/');
    
    // BaÅŸlÄ±k etiketlerinin doÄŸru hiyerarÅŸide olduÄŸunu kontrol et
    const h1 = page.locator('h1');
    await expect(h1).toBeVisible();
    
    // ButonlarÄ±n eriÅŸilebilir olduÄŸunu kontrol et
    const buttons = page.locator('button');
    const buttonCount = await buttons.count();
    expect(buttonCount).toBeGreaterThan(0);
    
    // Linklerin eriÅŸilebilir olduÄŸunu kontrol et
    const links = page.locator('a');
    const linkCount = await links.count();
    expect(linkCount).toBeGreaterThan(0);
  });

  test('Form eriÅŸilebilirliÄŸi', async ({ page }) => {
    await page.goto('/auth/signin');
    
    // Form alanlarÄ±nÄ±n label'larÄ± olduÄŸunu kontrol et
    const inputs = page.locator('input');
    const inputCount = await inputs.count();
    expect(inputCount).toBeGreaterThan(0);
    
    // Submit butonunun eriÅŸilebilir olduÄŸunu kontrol et
    const submitButton = page.locator('button[type="submit"]');
    await expect(submitButton).toBeVisible();
  });
});

test.describe('Cross-browser Tests', () => {
  test('Chrome uyumluluÄŸu', async ({ page }) => {
    await page.goto('/');
    await expect(page.locator('h1')).toContainText('Leben In Deutschland');
  });

  test('Firefox uyumluluÄŸu', async ({ page }) => {
    await page.goto('/');
    await expect(page.locator('h1')).toContainText('Leben In Deutschland');
  });

  test('Safari uyumluluÄŸu', async ({ page }) => {
    await page.goto('/');
    await expect(page.locator('h1')).toContainText('Leben In Deutschland');
  });
});
