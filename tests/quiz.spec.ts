import { test, expect } from '@playwright/test';

test.describe('Quiz Functionality', () => {
  test('Ana sayfa y√ºkleniyor', async ({ page }) => {
    await page.goto('/');
    await expect(page).toHaveTitle(/Leben in Deutschland Test/);
    
    // Logo'nun g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('text=Leben in Deutschland Test')).toBeVisible();
    
    // Start Quiz butonunun g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('text=Start Quiz')).toBeVisible();
  });

  test('Header logo ve navigasyon √ßalƒ±≈üƒ±yor', async ({ page }) => {
    await page.goto('/');
    
    // Logo'nun g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('span:has-text("‚òÖ")')).toBeVisible();
    
    // Navigasyon linklerini kontrol et
    await expect(page.locator('text=Home')).toBeVisible();
    await expect(page.locator('text=Premium Features')).toBeVisible();
  });

  test('Brandenburg Gate resmi y√ºkleniyor', async ({ page }) => {
    await page.goto('/');
    
    // Brandenburg Gate resminin y√ºklendiƒüini kontrol et
    const image = page.locator('img[alt*="Brandenburg Gate"]');
    await expect(image).toBeVisible();
  });

  test('All Questions sayfasƒ± y√ºkleniyor', async ({ page }) => {
    await page.goto('/all-questions');
    await expect(page.locator('h1')).toContainText('T√ºm Sorular');
  });

  test('Dil se√ßimi √ßalƒ±≈üƒ±yor', async ({ page }) => {
    await page.goto('/all-questions');
    
    // Dil se√ßeneklerinin g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('text=Deutsch + T√ºrk√ße')).toBeVisible();
    
    // Dil se√ßeneƒüine tƒ±kla
    const languageOption = page.locator('button:has-text("Deutsch + T√ºrk√ße")');
    await languageOption.click();
  });

  test('Soru cevaplama √ßalƒ±≈üƒ±yor', async ({ page }) => {
    await page.goto('/all-questions');
    
    // Sayfanƒ±n y√ºklenmesini bekle
    await page.waitForLoadState('networkidle');
    
    // ƒ∞lk se√ßeneƒüi se√ß - daha genel selector kullan
    const firstOption = page.locator('button').first();
    await firstOption.click();
    
    // Cevabƒ± g√∂nder butonunun g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('button:has-text("‚úÖ Cevabƒ± G√∂nder")')).toBeVisible();
  });

  test('Navigasyon butonlarƒ± √ßalƒ±≈üƒ±yor', async ({ page }) => {
    await page.goto('/all-questions');
    
    // √ñnceki sayfa butonunu kontrol et
    await expect(page.locator('button:has-text("‚Üê √ñnceki Sayfa")')).toBeVisible();
    
    // Ana sayfa butonunu kontrol et
    await expect(page.locator('a:has-text("üè† Ana Sayfa")')).toBeVisible();
    
    // Yanlƒ±≈ü cevaplarƒ±m butonunu kontrol et
    await expect(page.locator('a:has-text("‚ùå Yanlƒ±≈ü Cevaplarƒ±m")')).toBeVisible();
  });

  test('Quiz sayfasƒ± 50 √ºcretsiz soru g√∂steriyor', async ({ page }) => {
    await page.goto('/quiz');
    
    // Quiz ba≈ülƒ±ƒüƒ±nƒ±n Almanca olduƒüunu kontrol et
    await expect(page.locator('text=Leben in Deutschland Test')).toBeVisible();
    
    // √úcretsiz quiz bilgisinin g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('text=Kostenloses Quiz')).toBeVisible();
    
    // Logo'nun quiz sayfasƒ±nda da g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('span:has-text("‚òÖ")')).toBeVisible();
  });

  test('Quiz sayfasƒ± Almanca aray√ºz', async ({ page }) => {
    await page.goto('/quiz');
    
    // Almanca butonlarƒ± kontrol et
    await expect(page.locator('text=Antwort senden')).toBeVisible();
    
    // Almanca progress bar kontrol et
    await expect(page.locator('text=Frage')).toBeVisible();
  });

  test('Quiz tamamlama ve premium te≈üvik', async ({ page }) => {
    await page.goto('/quiz');
    
    // ƒ∞lk soruyu cevapla
    const firstOption = page.locator('button').nth(1); // ƒ∞kinci butonu se√ß (ilki home linki olabilir)
    await firstOption.click();
    
    // Cevabƒ± g√∂nder
    await page.locator('text=Antwort senden').click();
    
    // Sonraki soru butonunu kontrol et
    await expect(page.locator('text=N√§chste Frage')).toBeVisible();
  });

  test('√ñdeme sayfasƒ± y√ºkleniyor', async ({ page }) => {
    await page.goto('/payment');
    
    // √ñdeme formunu kontrol et
    await expect(page.locator('input[placeholder="Ad Soyad"]')).toBeVisible();
    await expect(page.locator('input[placeholder="4242424242424242"]')).toBeVisible();
  });
});

test.describe('Premium Features Tests', () => {
  test('Premium sayfasƒ± Study.jpg resmi g√∂steriyor', async ({ page }) => {
    await page.goto('/pricing');
    
    // Premium plan kartƒ±nƒ±n g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('text=Premium')).toBeVisible();
    
    // Study.jpg resminin y√ºklendiƒüini kontrol et
    const studyImage = page.locator('img[alt*="Study"]');
    await expect(studyImage).toBeVisible();
    
    // Premium √∂zelliklerini kontrol et
    await expect(page.locator('text=300+ soruya eri≈üim')).toBeVisible();
    await expect(page.locator('text=AI ile konu anlatƒ±mƒ±')).toBeVisible();
  });

  test('Premium sayfasƒ± fiyatlandƒ±rma', async ({ page }) => {
    await page.goto('/pricing');
    
    // Fiyat bilgisini kontrol et
    await expect(page.locator('text=‚Ç¨5.99')).toBeVisible();
    
    // Premium'a ge√ß butonunu kontrol et
    await expect(page.locator('text=Premium\'a Ge√ß')).toBeVisible();
    
    // √úcretsiz plan bilgilerini kontrol et
    await expect(page.locator('text=50 soruya eri≈üim')).toBeVisible();
  });

  test('Premium dashboard sayfasƒ±', async ({ page }) => {
    await page.goto('/premium-dashboard');
    
    // Premium dashboard elementlerini kontrol et
    await expect(page.locator('text=Premium Dashboard')).toBeVisible();
    
    // Dil se√ßim butonlarƒ±nƒ± kontrol et
    await expect(page.locator('text=üá©üá™ Deutsch')).toBeVisible();
    await expect(page.locator('text=üá∫üá∏ English')).toBeVisible();
  });
});

test.describe('Language Switching Tests', () => {
  test('Ana sayfa dil deƒüi≈ütirme - EN to DE', async ({ page }) => {
    await page.goto('/');
    
    // Debug panel'in g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('text=Language: en')).toBeVisible();
    
    // EN ba≈ülƒ±ƒüƒ±nƒ± kontrol et
    await expect(page.locator('h1')).toContainText('Leben in Deutschland Test');
    
    // DE butonuna tƒ±kla
    await page.click('button:has-text("DE")');
    
    // Debug panel'de dil deƒüi≈üimini kontrol et
    await expect(page.locator('text=Language: de')).toBeVisible();
    
    // DE ba≈ülƒ±ƒüƒ±nƒ± kontrol et
    await expect(page.locator('h1')).toContainText('Leben-in-Deutschland-Quiz');
    
    // Login butonunun DE olduƒüunu kontrol et
    await expect(page.locator('button:has-text("Anmelden")')).toBeVisible();
    
    // Signup butonunun DE olduƒüunu kontrol et
    await expect(page.locator('button:has-text("Registrieren")')).toBeVisible();
  });

  test('Ana sayfa dil deƒüi≈ütirme - DE to EN', async ({ page }) => {
    await page.goto('/');
    
    // √ñnce DE'ye ge√ß
    await page.click('button:has-text("DE")');
    await expect(page.locator('text=Language: de')).toBeVisible();
    
    // Sonra EN'ye geri d√∂n
    await page.click('button:has-text("EN")');
    await expect(page.locator('text=Language: en')).toBeVisible();
    
    // EN ba≈ülƒ±ƒüƒ±nƒ± kontrol et
    await expect(page.locator('h1')).toContainText('Leben in Deutschland Test');
    
    // Login butonunun EN olduƒüunu kontrol et
    await expect(page.locator('button:has-text("Log in")')).toBeVisible();
    
    // Signup butonunun EN olduƒüunu kontrol et
    await expect(page.locator('button:has-text("Sign up")')).toBeVisible();
  });

  test('√ñdeme sayfasƒ± dil deƒüi≈ütirme', async ({ page }) => {
    await page.goto('/payment');
    
    // EN ba≈ülƒ±ƒüƒ±nƒ± kontrol et
    await expect(page.locator('h1')).toContainText('Premium Membership - ‚Ç¨5.99/month');
    
    // DE butonuna tƒ±kla
    await page.click('button:has-text("DE")');
    
    // DE ba≈ülƒ±ƒüƒ±nƒ± kontrol et
    await expect(page.locator('h1')).toContainText('Premium-Mitgliedschaft - ‚Ç¨5.99/Monat');
    
    // DE form alanlarƒ±nƒ± kontrol et
    await expect(page.locator('label:has-text("Name auf der Karte")')).toBeVisible();
    await expect(page.locator('label:has-text("Kartennummer")')).toBeVisible();
    await expect(page.locator('label:has-text("Ablaufdatum")')).toBeVisible();
    
    // DE butonunu kontrol et
    await expect(page.locator('button:has-text("‚Ç¨5.99 bezahlen und Premium werden")')).toBeVisible();
  });

  test('Test kartlarƒ± dil deƒüi≈ütirme', async ({ page }) => {
    await page.goto('/payment');
    
    // EN test kartlarƒ± ba≈ülƒ±ƒüƒ±nƒ± kontrol et
    await expect(page.locator('h3:has-text("Test Cards")')).toBeVisible();
    
    // DE butonuna tƒ±kla
    await page.click('button:has-text("DE")');
    
    // DE test kartlarƒ± ba≈ülƒ±ƒüƒ±nƒ± kontrol et
    await expect(page.locator('h3:has-text("Test-Karten")')).toBeVisible();
    
    // DE test kartƒ± a√ßƒ±klamalarƒ±nƒ± kontrol et
    await expect(page.locator('text=Erfolgreiche Karte')).toBeVisible();
    await expect(page.locator('text=Abgelehnte Karte')).toBeVisible();
    await expect(page.locator('text=Unzureichende Mittel')).toBeVisible();
    await expect(page.locator('text=Abgelaufene Karte')).toBeVisible();
  });
});

test.describe('Responsive Design', () => {
  test('Mobil g√∂r√ºn√ºm', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('/all-questions');
    
    // Mobil g√∂r√ºn√ºmde sayfa y√ºkleniyor
    await expect(page.locator('h1')).toContainText('T√ºm Sorular');
  });

  test('Mobil dil deƒüi≈ütirme', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('/');
    
    // Mobil g√∂r√ºn√ºmde dil deƒüi≈ütirme
    await page.click('button:has-text("DE")');
    await expect(page.locator('h1')).toContainText('Leben-in-Deutschland-Quiz');
    
    await page.click('button:has-text("EN")');
    await expect(page.locator('h1')).toContainText('Leben in Deutschland Test');
  });
});

test.describe('Error Handling Tests', () => {
  test('404 sayfasƒ±', async ({ page }) => {
    await page.goto('/nonexistent-page');
    
    // 404 sayfasƒ±nƒ±n y√ºklendiƒüini kontrol et
    await expect(page.locator('text=404')).toBeVisible();
  });

  test('Resim y√ºkleme hatasƒ± fallback', async ({ page }) => {
    await page.goto('/');
    
    // JavaScript ile resim hatasƒ±nƒ± sim√ºle et
    await page.evaluate(() => {
      const img = document.querySelector('img[alt*="Brandenburg Gate"]');
      if (img) {
        img.dispatchEvent(new Event('error'));
      }
    });
    
    // Fallback i√ßeriƒüinin g√∂r√ºn√ºr olduƒüunu kontrol et (gradient background)
    await page.waitForTimeout(1000); // Fallback'in y√ºklenmesi i√ßin bekle
  });
});

test.describe('Performance Tests', () => {
  test('Sayfa y√ºkleme hƒ±zƒ±', async ({ page }) => {
    const startTime = Date.now();
    await page.goto('/');
    const loadTime = Date.now() - startTime;
    
    // Sayfa 5 saniyeden az s√ºrede y√ºklenmeli
    expect(loadTime).toBeLessThan(5000);
    
    // Temel elementlerin y√ºklendiƒüini kontrol et
    await expect(page.locator('text=Leben in Deutschland Test')).toBeVisible();
  });

  test('Quiz sayfasƒ± performansƒ±', async ({ page }) => {
    const startTime = Date.now();
    await page.goto('/quiz');
    const loadTime = Date.now() - startTime;
    
    // Quiz sayfasƒ± 3 saniyeden az s√ºrede y√ºklenmeli
    expect(loadTime).toBeLessThan(3000);
    
    // Quiz elementlerinin y√ºklendiƒüini kontrol et
    await expect(page.locator('text=Kostenloses Quiz')).toBeVisible();
  });

  test('Mobil quiz performansƒ±', async ({ page }) => {
    await page.setViewportSize({ width: 375, height: 667 });
    
    const startTime = Date.now();
    await page.goto('/quiz');
    const loadTime = Date.now() - startTime;
    
    // Mobil quiz sayfasƒ± 4 saniyeden az s√ºrede y√ºklenmeli
    expect(loadTime).toBeLessThan(4000);
    
    // Mobilde quiz elementlerinin g√∂r√ºn√ºr olduƒüunu kontrol et
    await expect(page.locator('text=Leben in Deutschland Test')).toBeVisible();
    await expect(page.locator('span:has-text("‚òÖ")')).toBeVisible();
  });
});
